from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import date
from app.states import MealStates
from app.keyboards import (
    get_meal_type_keyboard,
    get_additional_injection_keyboard,
    get_additional_carbs_keyboard,
    get_time_from_meal_keyboard,
    get_main_menu_keyboard,
    get_cancel_keyboard,
    get_skip_proteins_keyboard,
    get_fci_confirmation_keyboard,
)
from app.utils import (
    parse_glucose_input,
    parse_number_input,
    calculate_uk,
    calculate_injection_correction,
    get_meal_type_name,
    get_date_suggestions,
    format_date,
    get_insulin_for_fci,
)
from db.repository import MealRecordRepository, AdditionalInjectionRepository, FCIRepository
from db.session import async_session
from db.models import MealType

router = Router()


async def _safe_edit_or_answer(callback: CallbackQuery, text: str, parse_mode: str | None = None, reply_markup=None):
    msg = callback.message
    if msg is not None and hasattr(msg, "edit_text"):
        try:
            await msg.edit_text(text, parse_mode=parse_mode, reply_markup=reply_markup)
            await callback.answer()
            return
        except Exception:
            pass
    if msg is not None and hasattr(msg, "answer"):
        try:
            await msg.answer(text, parse_mode=parse_mode, reply_markup=reply_markup)
            await callback.answer()
            return
        except Exception:
            pass
    bot = callback.bot
    if bot is not None:
        await bot.send_message(
            chat_id=callback.from_user.id, text=text, parse_mode=parse_mode, reply_markup=reply_markup
        )
    await callback.answer()


@router.message(F.text == "üçΩÔ∏è –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –£–ö")
async def start_uk_calculation(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—á—ë—Ç–∞ –£–ö"""
    text = """
üçΩÔ∏è <b>–†–∞—Å—á—ë—Ç –£–ö (—É–≥–ª–µ–≤–æ–¥–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—ë–º –ø–∏—â–∏, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –£–ö:
    """

    await state.set_state(MealStates.waiting_for_meal_type)
    await message.answer(text, reply_markup=get_meal_type_keyboard(), parse_mode="HTML")


@router.callback_query(F.data.startswith("meal_"))
async def process_meal_type_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏"""
    if not callback.data:
        await callback.answer()
        return
    meal_type_str = callback.data.split("_")[1]
    meal_type = MealType(meal_type_str)

    await state.update_data(meal_type=meal_type)
    await state.set_state(MealStates.waiting_for_glucose_start)

    text = f"""
‚úÖ –í—ã–±—Ä–∞–Ω: {get_meal_type_name(meal_type)}

üìä <b>–®–∞–≥ 1:</b> –í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–°–ö_—Å—Ç–∞—Ä—Ç) –≤ –º–º–æ–ª—å/–ª –Ω–∞ –º–æ–º–µ–Ω—Ç –≤–≤–æ–¥–∞ –∏–Ω—Å—É–ª–∏–Ω–∞:
    """

    await _safe_edit_or_answer(callback, text, parse_mode="HTML")


@router.message(MealStates.waiting_for_glucose_start)
async def process_glucose_start(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –°–ö_—Å—Ç–∞—Ä—Ç"""
    try:
        glucose_start = parse_glucose_input(message.text or "")
        if glucose_start < 1 or glucose_start > 30:
            await message.answer(
                "‚ùå –£—Ä–æ–≤–µ–Ω—å –≥–ª—é–∫–æ–∑—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 30 –º–º–æ–ª—å/–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard(),
            )
            return

        await state.update_data(glucose_start=glucose_start)
        await state.set_state(MealStates.waiting_for_pause_time)

        text = f"""
‚úÖ –°–ö_—Å—Ç–∞—Ä—Ç: {glucose_start} –º–º–æ–ª—å/–ª

‚è±Ô∏è <b>–®–∞–≥ 2:</b> –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–∞—É–∑—ã –º–µ–∂–¥—É –µ–¥–æ–π –∏ —É–∫–æ–ª–æ–º –≤ –º–∏–Ω—É—Ç–∞—Ö (–∏–ª–∏ 0, –µ—Å–ª–∏ —É–∫–æ–ª–∞–ª–∏ —Å—Ä–∞–∑—É):
        """

        await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—Ä–æ–≤–Ω—è –≥–ª—é–∫–æ–∑—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7.5):", reply_markup=get_cancel_keyboard()
        )


@router.message(MealStates.waiting_for_pause_time)
async def process_pause_time(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—É–∑—ã"""
    try:
        pause_time = int(parse_number_input(message.text or ""))
        if pause_time < 0:
            await message.answer(
                "‚ùå –í—Ä–µ–º—è –ø–∞—É–∑—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_cancel_keyboard()
            )
            return

        await state.update_data(pause_time=pause_time)
        await state.set_state(MealStates.waiting_for_carbs_main)

        text = f"""
‚úÖ –í—Ä–µ–º—è –ø–∞—É–∑—ã: {pause_time} –º–∏–Ω.

üçû <b>–®–∞–≥ 3:</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö:
        """

        await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15):")


@router.message(MealStates.waiting_for_carbs_main)
async def process_carbs_main(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤"""
    try:
        carbs_main = parse_number_input(message.text or "")
        if carbs_main < 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard(),
            )
            return

        await state.update_data(carbs_main=carbs_main)
        await state.set_state(MealStates.waiting_for_carbs_additional)

        text = f"""
‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã: {carbs_main}–≥

üç≠ <b>–®–∞–≥ 4:</b> –ë—ã–ª–∏ –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã (—Å–ª–∞–¥–æ—Å—Ç–∏, —Å–æ–∫–∏ –∏ —Ç.–¥.)?
        """

        await message.answer(text, reply_markup=get_additional_carbs_keyboard(), parse_mode="HTML")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50):",
            reply_markup=get_cancel_keyboard(),
        )


@router.callback_query(F.data == "add_carbs")
async def add_additional_carbs(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤"""
    await state.set_state(MealStates.waiting_for_carbs_additional)

    text = """
üç≠ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö:
    """

    await _safe_edit_or_answer(callback, text)


@router.callback_query(F.data == "skip_carbs")
async def skip_additional_carbs(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤"""
    await state.update_data(carbs_additional=0.0)
    await state.set_state(MealStates.waiting_for_proteins)

    text = """
‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã: 0–≥

ü•© <b>–®–∞–≥ 5:</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç–µ):
    """

    await _safe_edit_or_answer(callback, text, parse_mode="HTML")


@router.message(MealStates.waiting_for_carbs_additional)
async def process_carbs_additional(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤"""
    try:
        carbs_additional = parse_number_input(message.text or "")
        if carbs_additional < 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard(),
            )
            return

        await state.update_data(carbs_additional=carbs_additional)
        await state.set_state(MealStates.waiting_for_proteins)

        text = f"""
‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã: {carbs_additional}–≥

ü•© <b>–®–∞–≥ 5:</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö
–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–µ–ª–∫–∏¬ª:
        """

        await message.answer(text, reply_markup=get_skip_proteins_keyboard(), parse_mode="HTML")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15):",
            reply_markup=get_cancel_keyboard(),
        )


@router.callback_query(F.data == "skip_proteins")
async def skip_proteins(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–µ–ª–∫–∏"""
    await state.update_data(proteins=0.0)
    await state.set_state(MealStates.waiting_for_fats)

    text = """
ü•ë <b>–®–∞–≥ 6:</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç–µ):
    """

    await _safe_edit_or_answer(callback, text, parse_mode="HTML")


@router.callback_query(F.data == "enter_proteins")
async def enter_proteins(callback: CallbackQuery, state: FSMContext):
    await state.set_state(MealStates.waiting_for_proteins)
    text = """
ü•© –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö:
    """
    await _safe_edit_or_answer(callback, text)


@router.message(MealStates.waiting_for_proteins)
async def process_proteins(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±–µ–ª–∫–æ–≤"""
    try:
        proteins = parse_number_input(message.text or "")
        if proteins < 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard(),
            )
            return

        await state.update_data(proteins=proteins)
        await state.set_state(MealStates.waiting_for_fats)

        text = f"""
‚úÖ –ë–µ–ª–∫–∏: {proteins}–≥

ü•ë <b>–®–∞–≥ 6:</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç–µ):
        """

        await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20):", reply_markup=get_cancel_keyboard()
        )


@router.message(MealStates.waiting_for_fats)
async def process_fats(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∂–∏—Ä–æ–≤"""
    try:
        fats = parse_number_input(message.text or "")
        if fats < 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard(),
            )
            return

        await state.update_data(fats=fats)
        await state.set_state(MealStates.waiting_for_insulin_food)

        text = f"""
‚úÖ –ñ–∏—Ä—ã: {fats}–≥

üíâ <b>–®–∞–≥ 7:</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –Ω–∞ –µ–¥—É –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö:
        """

        await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10):", reply_markup=get_cancel_keyboard()
        )


@router.message(MealStates.waiting_for_insulin_food)
async def process_insulin_food(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Å—É–ª–∏–Ω–∞ –Ω–∞ –µ–¥—É"""
    try:
        insulin_food = parse_number_input(message.text or "")
        if insulin_food < 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard(),
            )
            return

        await state.update_data(insulin_food=insulin_food)
        await state.set_state(MealStates.waiting_for_additional_injections)

        text = f"""
‚úÖ –ò–Ω—Å—É–ª–∏–Ω –Ω–∞ –µ–¥—É: {insulin_food} –µ–¥.

üíâ <b>–®–∞–≥ 8:</b> –ë—ã–ª–∏ –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–∫–æ–ª–∫–∏ (–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏) –ø–æ—Å–ª–µ –µ–¥—ã?
        """

        await message.answer(text, reply_markup=get_additional_injection_keyboard(), parse_mode="HTML")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.5):",
            reply_markup=get_cancel_keyboard(),
        )


@router.callback_query(F.data == "add_injection")
async def add_additional_injection(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–∫–æ–ª–∫–∏"""
    await state.update_data(additional_injections=[])
    await state.set_state(MealStates.waiting_for_additional_injections)

    text = """
üíâ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–∫–æ–ª–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –µ–¥—ã:
    """

    await _safe_edit_or_answer(callback, text, reply_markup=get_time_from_meal_keyboard())


@router.callback_query(F.data.startswith("time_"))
async def process_injection_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–∫–æ–ª–∫–∏"""
    if not callback.data:
        await callback.answer()
        return
    time_minutes = int(callback.data.split("_")[1])

    await state.update_data(current_injection_time=time_minutes)
    await state.set_state(MealStates.waiting_for_additional_injections)

    text = f"""
‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–¥–∫–æ–ª–∫–∏: {time_minutes // 60} —á–∞—Å(–æ–≤)

üíâ –í–≤–µ–¥–∏—Ç–µ –¥–æ–∑—É –ø–æ–¥–∫–æ–ª–∫–∏ –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö:
    """

    await _safe_edit_or_answer(callback, text)


@router.message(MealStates.waiting_for_additional_injections)
async def process_injection_dose(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–∑—ã –ø–æ–¥–∫–æ–ª–∫–∏"""
    try:
        dose = parse_number_input(message.text or "")
        if dose <= 0:
            await message.answer(
                "‚ùå –î–æ–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_cancel_keyboard()
            )
            return

        data = await state.get_data()
        time_minutes = data.get("current_injection_time", 0)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é
        correction_factor = calculate_injection_correction(time_minutes)
        corrected_dose = dose * correction_factor

        # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–∫–æ–ª–æ–∫
        injections = data.get("additional_injections", [])
        injections.append({"time": time_minutes, "dose": dose, "corrected_dose": corrected_dose})
        await state.update_data(additional_injections=injections)

        text = f"""
‚úÖ –ü–æ–¥–∫–æ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:
‚Ä¢ –í—Ä–µ–º—è: {time_minutes // 60} —á–∞—Å(–æ–≤) –ø–æ—Å–ª–µ –µ–¥—ã
‚Ä¢ –î–æ–∑–∞: {dose} –µ–¥.
‚Ä¢ –° –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π: {corrected_dose:.2f} –µ–¥.

–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –ø–æ–¥–∫–æ–ª–∫—É?
        """

        await message.answer(text, reply_markup=get_additional_injection_keyboard(), parse_mode="HTML")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥–æ–∑—É –∏–Ω—Å—É–ª–∏–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):", reply_markup=get_cancel_keyboard()
        )


@router.callback_query(F.data == "finish_injections")
async def finish_injections(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–¥–∫–æ–ª–æ–∫"""
    data = await state.get_data()
    injections = data.get("additional_injections", [])

    total_additional_insulin = sum(inj["corrected_dose"] for inj in injections)
    await state.update_data(insulin_additional=total_additional_insulin)
    await state.set_state(MealStates.waiting_for_glucose_end)

    text = f"""
‚úÖ –ü–æ–¥–∫–æ–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –í—Å–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞: {total_additional_insulin:.2f} –µ–¥.

üìä <b>–®–∞–≥ 9:</b> –í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–°–ö_–æ—Ç—Ä–∞–±–æ—Ç–∫–∞) —á–µ—Ä–µ–∑ 4-5 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –µ–¥—ã –≤ –º–º–æ–ª—å/–ª:
    """

    await _safe_edit_or_answer(callback, text, parse_mode="HTML")


@router.message(MealStates.waiting_for_glucose_end)
async def process_glucose_end(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –°–ö_–æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–∫–∞–∑ –§–ß–ò –∑–∞ 3 –¥–Ω—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        glucose_end = parse_glucose_input(message.text or "")
        if glucose_end < 1 or glucose_end > 30:
            await message.answer(
                "‚ùå –£—Ä–æ–≤–µ–Ω—å –≥–ª—é–∫–æ–∑—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 30 –º–º–æ–ª—å/–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard(),
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º glucose_end –≤ state
        await state.update_data(glucose_end=glucose_end)

        # –ü–æ–ª—É—á–∞–µ–º –§–ß–ò –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as session:
            fci_repo = FCIRepository(session)
            latest_fci = await fci_repo.get_latest(user.id)

            if not latest_fci:
                await message.answer(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –§–ß–ò! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –§–ß–ò'",
                    reply_markup=get_main_menu_keyboard(),
                )
                await state.clear()
                return

            fci_value = float(latest_fci.value)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –§–ß–ò
            day1, day2, day3 = get_date_suggestions()
            day1_total = await get_insulin_for_fci(user.id, day1, session)
            day2_total = await get_insulin_for_fci(user.id, day2, session)
            day3_total = await get_insulin_for_fci(user.id, day3, session)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ß–ò –≤ state –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(fci_value=fci_value)
        await state.set_state(MealStates.waiting_for_fci_confirmation)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –§–ß–ò –∑–∞ 3 –¥–Ω—è
        fci_review_text = f"""
‚úÖ –°–ö_–æ—Ç—Ä–∞–±–æ—Ç–∫–∞: {glucose_end} –º–º–æ–ª—å/–ª

üìä <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –§–ß–ò –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è:</b>

‚Ä¢ <b>{format_date(day1)}</b> (–≤—á–µ—Ä–∞): {day1_total:.1f} –µ–¥.
‚Ä¢ <b>{format_date(day2)}</b> (–ø–æ–∑–∞–≤—á–µ—Ä–∞): {day2_total:.1f} –µ–¥.
‚Ä¢ <b>{format_date(day3)}</b> (–ø–æ–∑–∞–ø–æ–∑–∞–≤—á–µ—Ä–∞): {day3_total:.1f} –µ–¥.

üìà <b>–¢–µ–∫—É—â–∏–π –§–ß–ò:</b> {fci_value:.2f}

‚ö†Ô∏è –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–∞–∫–æ–π-—Ç–æ –¥–µ–Ω—å –Ω–µ–≤–µ—Ä–Ω—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å.
–ò–Ω–∞—á–µ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—Å—á–µ—Ç" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –£–ö.
        """

        await message.answer(fci_review_text, parse_mode="HTML", reply_markup=get_fci_confirmation_keyboard())

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—Ä–æ–≤–Ω—è –≥–ª—é–∫–æ–∑—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 6.8):", reply_markup=get_cancel_keyboard()
        )


@router.callback_query(F.data == "uk_finish_calculation")
async def finish_uk_calculation(callback: CallbackQuery, state: FSMContext, user):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –£–ö –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –§–ß–ò"""
    data = await state.get_data()
    glucose_end = data["glucose_end"]
    fci_value = data["fci_value"]

    async with async_session() as session:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –£–ö
        uk_value = calculate_uk(
            glucose_start=data["glucose_start"],
            glucose_end=glucose_end,
            fci=fci_value,
            insulin_food=data["insulin_food"],
            insulin_additional=data.get("insulin_additional", 0),
            carbs_main=data["carbs_main"],
            carbs_additional=data.get("carbs_additional", 0),
            proteins=data.get("proteins"),
            fats=data.get("fats"),
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏—ë–º–µ –ø–∏—â–∏
        meal_repo = MealRecordRepository(session)
        meal_record = await meal_repo.create(
            user_id=user.id,
            date=date.today(),
            meal_type=data["meal_type"],
            glucose_start=data["glucose_start"],
            pause_time=data.get("pause_time"),
            carbs_main=data["carbs_main"],
            carbs_additional=data.get("carbs_additional", 0),
            proteins=data.get("proteins"),
            insulin_food=data["insulin_food"],
            glucose_end=glucose_end,
            insulin_additional=data.get("insulin_additional", 0),
            uk_value=uk_value,
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–∫–æ–ª–∫–∏
        if data.get("additional_injections"):
            injection_repo = AdditionalInjectionRepository(session)
            for inj in data["additional_injections"]:
                await injection_repo.create(
                    meal_record_id=int(meal_record.id),
                    time_from_meal=inj["time"],
                    dose=inj["dose"],
                    dose_corrected=inj["corrected_dose"],
                )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∏–Ω—Å—É–ª–∏–Ω–∞ –¢–û–õ–¨–ö–û –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ (–Ω–µ —Å—É–º–º—É –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å!)
        from db.repository import InsulinRecordRepository
        from db.models import InsulinType

        insulin_repo = InsulinRecordRepository(session)

        # –ò–Ω—Å—É–ª–∏–Ω —Ç–æ–ª—å–∫–æ —ç—Ç–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        current_meal_insulin = data["insulin_food"] + data.get("insulin_additional", 0)

        await insulin_repo.create(
            user_id=user.id,
            date=date.today(),
            insulin_type=InsulinType.FOOD,
            amount=current_meal_insulin,
            is_manual=False,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –∏–∑ —Ä–∞—Å—á–µ—Ç–∞ –£–ö
        )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –æ—Ç—á—ë—Ç–∞
    pause_time = data.get("pause_time")
    pause_line = f"\n‚Ä¢ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –µ–¥–æ–π: {pause_time} –º–∏–Ω." if pause_time is not None else ""

    injections = data.get("additional_injections") or []
    if injections:
        injections_lines = ["\nüíâ <b>–ü–æ–¥–∫–æ–ª–∫–∏:</b>"]
        for idx, inj in enumerate(injections, start=1):
            tmin = int(inj.get("time", 0))
            dose = float(inj.get("dose", 0))
            dose_corr = float(inj.get("corrected_dose", 0))
            injections_lines.append(
                f"‚Ä¢ #{idx}: —á–µ—Ä–µ–∑ {tmin // 60} —á (‚âà {tmin} –º–∏–Ω) ‚Äî {dose} –µ–¥. ‚Üí {dose_corr:.2f} –µ–¥."
            )
        injections_block = "\n".join(injections_lines)
    else:
        injections_block = ""

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = f"""
üéâ <b>–†–∞—Å—á—ë—Ç –£–ö –∑–∞–≤–µ—Ä—à—ë–Ω!</b>

üìä <b>–î–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –ü—Ä–∏—ë–º –ø–∏—â–∏: {get_meal_type_name(data["meal_type"])}{pause_line}
‚Ä¢ –°–ö_—Å—Ç–∞—Ä—Ç: {data["glucose_start"]} –º–º–æ–ª—å/–ª
‚Ä¢ –°–ö_–æ—Ç—Ä–∞–±–æ—Ç–∫–∞: {glucose_end} –º–º–æ–ª—å/–ª
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {data["carbs_main"]}–≥ + {data.get("carbs_additional", 0)}–≥ = {data["carbs_main"] + data.get("carbs_additional", 0)}–≥
‚Ä¢ –ë–µ–ª–∫–∏: {data.get("proteins", 0)}–≥
‚Ä¢ –ñ–∏—Ä—ã: {data.get("fats", 0)}–≥
‚Ä¢ –ò–Ω—Å—É–ª–∏–Ω –Ω–∞ –µ–¥—É: {data["insulin_food"]} –µ–¥.
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—É–ª–∏–Ω: {data.get("insulin_additional", 0):.2f} –µ–¥.
‚Ä¢ –§–ß–ò: {fci_value:.2f}
{injections_block}

üìà <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ <b>–£–ö = {uk_value:.3f}</b>

–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –£–ö –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏.
    """

    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if callback.message and hasattr(callback.message, "answer"):
        await callback.message.answer(result_text, parse_mode="HTML", reply_markup=get_main_menu_keyboard())
    elif callback.bot:
        await callback.bot.send_message(
            chat_id=callback.from_user.id, text=result_text, parse_mode="HTML", reply_markup=get_main_menu_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data == "uk_edit_fci")
async def start_fci_edit_in_meal(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—É–ª–∏–Ω–∞ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –§–ß–ò –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞ –£–ö"""
    await state.set_state(MealStates.waiting_for_fci_edit_date)

    text = """
‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—É–ª–∏–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –§–ß–ò</b>

–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 03.10.2024):
    """

    await _safe_edit_or_answer(callback, text, parse_mode="HTML", reply_markup=get_cancel_keyboard())


@router.message(MealStates.waiting_for_fci_edit_date)
async def process_fci_edit_date_in_meal(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—É–ª–∏–Ω–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞ –£–ö"""
    try:
        from datetime import datetime

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_str = (message.text or "").strip()
        date_obj = datetime.strptime(date_str, "%d.%m.%Y").date()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ —ç—Ç—É –¥–∞—Ç—É
        async with async_session() as session:
            current_insulin = await get_insulin_for_fci(user.id, date_obj, session)

        await state.update_data(edit_fci_date=date_obj, current_fci_insulin=current_insulin)
        await state.set_state(MealStates.waiting_for_fci_edit_amount)

        text = f"""
‚úÖ –î–∞—Ç–∞: {format_date(date_obj)}
üíâ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞: <b>{current_insulin:.1f} –µ–¥.</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å:
        """

        await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 03.10.2024):",
            reply_markup=get_cancel_keyboard(),
        )


@router.message(MealStates.waiting_for_fci_edit_amount)
async def process_fci_edit_amount_in_meal(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Å—É–ª–∏–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –§–ß–ò"""
    try:
        new_insulin = parse_number_input(message.text or "")
        if new_insulin < 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard(),
            )
            return

        data = await state.get_data()
        edit_fci_date = data["edit_fci_date"]
        current_fci_insulin = data["current_fci_insulin"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—É–ª–∏–Ω–∞ –∫–∞–∫ —Ä—É—á–Ω—É—é –∑–∞–ø–∏—Å—å
        async with async_session() as session:
            from db.repository import InsulinRecordRepository
            from db.models import InsulinType

            insulin_repo = InsulinRecordRepository(session)
            await insulin_repo.update_or_create_manual(
                user_id=user.id, target_date=edit_fci_date, insulin_type=InsulinType.FOOD, amount=new_insulin
            )

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –§–ß–ò
            from app.utils import calculate_fci

            day1, day2, day3 = get_date_suggestions()
            day1_total = await get_insulin_for_fci(user.id, day1, session)
            day2_total = await get_insulin_for_fci(user.id, day2, session)
            day3_total = await get_insulin_for_fci(user.id, day3, session)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ 3 –¥–Ω—è, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –§–ß–ò
            if day1_total > 0 and day2_total > 0 and day3_total > 0:
                fci_value = calculate_fci(day1_total, day2_total, day3_total)
                fci_repo = FCIRepository(session)
                await fci_repo.update_or_create(user_id=user.id, date=day1, value=fci_value)

                # –û–±–Ω–æ–≤–ª—è–µ–º –§–ß–ò –≤ state
                await state.update_data(fci_value=fci_value)
            else:
                fci_value = data.get("fci_value", 0)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –§–ß–ò
        await state.set_state(MealStates.waiting_for_fci_confirmation)

        text = f"""
‚úÖ <b>–î–∞–Ω–Ω—ã–µ –∏–Ω—Å—É–ª–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω—ã!</b>

üìÖ –î–∞—Ç–∞: {format_date(edit_fci_date)}
üíâ –°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_fci_insulin:.1f} –µ–¥.
üíâ –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{new_insulin:.1f} –µ–¥.</b>

üìä <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –§–ß–ò –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è:</b>

‚Ä¢ <b>{format_date(day1)}</b> (–≤—á–µ—Ä–∞): {day1_total:.1f} –µ–¥.
‚Ä¢ <b>{format_date(day2)}</b> (–ø–æ–∑–∞–≤—á–µ—Ä–∞): {day2_total:.1f} –µ–¥.
‚Ä¢ <b>{format_date(day3)}</b> (–ø–æ–∑–∞–ø–æ–∑–∞–≤—á–µ—Ä–∞): {day3_total:.1f} –µ–¥.

üìà <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –§–ß–ò:</b> {fci_value:.2f}

‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—Å—á–µ—Ç".
        """

        await message.answer(text, parse_mode="HTML", reply_markup=get_fci_confirmation_keyboard())

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.0):",
            reply_markup=get_cancel_keyboard(),
        )
