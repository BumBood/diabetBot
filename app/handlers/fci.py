from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.states import FCIStates
from app.keyboards import (
    get_main_menu_keyboard,
    get_cancel_keyboard,
    get_fci_correction_keyboard,
    get_fci_edit_keyboard,
)
from app.utils import (
    get_date_suggestions,
    format_date,
    calculate_fci,
    parse_number_input,
    get_insulin_for_fci,
)
from db.repository import FCIRepository, InsulinRecordRepository
from db.models import InsulinType
from db.session import async_session

router = Router()


@router.message(F.text == "üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –§–ß–ò")
async def start_fci_calculation(message: Message, state: FSMContext, user):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—á—ë—Ç–∞ –§–ß–ò"""
    day1, day2, day3 = get_date_suggestions()

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: meal_records > manual insulin > auto insulin
        day1_total = await get_insulin_for_fci(user.id, day1, session)
        day2_total = await get_insulin_for_fci(user.id, day2, session)
        day3_total = await get_insulin_for_fci(user.id, day3, session)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ —Ç—Ä–∏ –¥–Ω—è, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Å—á—ë—Ç—É
        if day1_total > 0 and day2_total > 0 and day3_total > 0:
            fci_value = calculate_fci(day1_total, day2_total, day3_total)

            fci_repo = FCIRepository(session)
            await fci_repo.update_or_create(user_id=user.id, date=day1, value=fci_value)

            result_text = f"""
üéâ <b>–†–∞—Å—á—ë—Ç –§–ß–ò –∑–∞–≤–µ—Ä—à—ë–Ω!</b>

üìä <b>–î–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ {format_date(day1)}: {day1_total:.1f} –µ–¥.
‚Ä¢ {format_date(day2)}: {day2_total:.1f} –µ–¥.  
‚Ä¢ {format_date(day3)}: {day3_total:.1f} –µ–¥.

üìà <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {(day1_total + day2_total + day3_total) / 3:.2f} –µ–¥.
‚Ä¢ <b>–§–ß–ò = {fci_value:.2f}</b>

‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –§–ß–ò –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –£–ö.
            """

            await state.clear()
            await message.answer(result_text, parse_mode="HTML", reply_markup=get_fci_edit_keyboard())
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–Ω–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å
        missing_days = []
        if day1_total == 0:
            missing_days.append((1, day1))
        if day2_total == 0:
            missing_days.append((2, day2))
        if day3_total == 0:
            missing_days.append((3, day3))

        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—á–µ—Ä–∞ (day1), –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–≥–æ
        if day1_total == 0:
            text = f"""
üìä <b>–†–∞—Å—á—ë—Ç –§–ß–ò (—Ñ–æ—Ä–º—É–ª–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Å—É–ª–∏–Ω—É)</b>

–ú–Ω–µ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –Ω–∞ –µ–¥—É –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ (—Å–∫–æ–ª—ã) —Å 8:00 –¥–æ 24:00 –∑–∞ —Ç—Ä–∏ –¥–Ω—è:

‚Ä¢ <b>–í—á–µ—Ä–∞</b> ({format_date(day1)})
‚Ä¢ <b>–ü–æ–∑–∞–≤—á–µ—Ä–∞</b> ({format_date(day2)})
‚Ä¢ <b>–ü–æ–∑–∞–ø–æ–∑–∞–≤—á–µ—Ä–∞</b> ({format_date(day3)})

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –í —Ä–∞—Å—á—ë—Ç –ù–ï –≤–∫–ª—é—á–∞–µ—Ç—Å—è –±–∞–∑–∞–ª—å–Ω—ã–π (—Ñ–æ–Ω–æ–≤–æ–π) –∏–Ω—Å—É–ª–∏–Ω!

–ù–∞—á–Ω—ë–º —Å –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è. –í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ {format_date(day1)}:
            """

            await state.set_state(FCIStates.waiting_for_day1)
            await state.update_data(day1_date=day1, day2_date=day2, day3_date=day3)
            await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞, –Ω–æ –Ω–µ—Ç –∑–∞ –ø–æ–∑–∞–≤—á–µ—Ä–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–∑–∞–≤—á–µ—Ä–∞
        elif day2_total == 0:
            text = f"""
üìä <b>–†–∞—Å—á—ë—Ç –§–ß–ò (—Ñ–æ—Ä–º—É–ª–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Å—É–ª–∏–Ω—É)</b>

–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:
‚Ä¢ <b>{format_date(day1)}</b>: {day1_total:.1f} –µ–¥. ‚úÖ

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ <b>{format_date(day2)}</b>:
            """

            text += "\n\nüí° <i>–î–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞ –≤–∑—è—Ç—ã –∏–∑ –ë–î. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>"
            await message.answer(text, reply_markup=get_fci_correction_keyboard(), parse_mode="HTML")

            await state.set_state(FCIStates.waiting_for_day2)
            await state.update_data(day1_date=day1, day2_date=day2, day3_date=day3, day1_value=day1_total)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞ –∏ –ø–æ–∑–∞–≤—á–µ—Ä–∞, –Ω–æ –Ω–µ—Ç –∑–∞ –ø–æ–∑–∞–ø–æ–∑–∞–≤—á–µ—Ä–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–∑–∞–ø–æ–∑–∞–≤—á–µ—Ä–∞
        elif day3_total == 0:
            text = f"""
üìä <b>–†–∞—Å—á—ë—Ç –§–ß–ò (—Ñ–æ—Ä–º—É–ª–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Å—É–ª–∏–Ω—É)</b>

–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏:
‚Ä¢ <b>{format_date(day1)}</b>: {day1_total:.1f} –µ–¥.
‚Ä¢ <b>{format_date(day2)}</b>: {day2_total:.1f} –µ–¥.

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ <b>{format_date(day3)}</b>:
            """

            text += "\n\nüí° <i>–î–∞–Ω–Ω—ã–µ –≤–∑—è—Ç—ã –∏–∑ –ë–î. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>"
            await message.answer(text, reply_markup=get_fci_correction_keyboard(), parse_mode="HTML")

            await state.set_state(FCIStates.waiting_for_day3)
            await state.update_data(
                day1_date=day1, day2_date=day2, day3_date=day3, day1_value=day1_total, day2_value=day2_total
            )


@router.message(FCIStates.waiting_for_day1)
async def process_day1_input(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å 1"""
    try:
        day1_value = parse_number_input(message.text or "")
        if day1_value <= 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_cancel_keyboard()
            )
            return

        data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—É–ª–∏–Ω–∞ –≤ –ë–î –∫–∞–∫ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
        async with async_session() as session:
            insulin_repo = InsulinRecordRepository(session)
            await insulin_repo.create(
                user_id=user.id,
                date=data["day1_date"],
                insulin_type=InsulinType.FOOD,
                amount=day1_value,
                is_manual=True,  # –ü–µ—Ä–≤—ã–π –≤–≤–æ–¥ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º
            )

        await state.update_data(day1_value=day1_value)

        text = f"""
‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {format_date(data["day1_date"])}: {day1_value} –µ–¥. (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î)

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ {format_date(data["day2_date"])}:
        """

        await state.set_state(FCIStates.waiting_for_day2)
        await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.5):",
            reply_markup=get_cancel_keyboard(),
        )


@router.message(FCIStates.waiting_for_day2)
async def process_day2_input(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å 2"""
    try:
        day2_value = parse_number_input(message.text or "")
        if day2_value <= 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_cancel_keyboard()
            )
            return

        data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—É–ª–∏–Ω–∞ –≤ –ë–î –∫–∞–∫ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
        async with async_session() as session:
            insulin_repo = InsulinRecordRepository(session)
            await insulin_repo.create(
                user_id=user.id,
                date=data["day2_date"],
                insulin_type=InsulinType.FOOD,
                amount=day2_value,
                is_manual=True,  # –ü–µ—Ä–≤—ã–π –≤–≤–æ–¥ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º
            )

        await state.update_data(day2_value=day2_value)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è day3
        async with async_session() as session:
            day3_total = await get_insulin_for_fci(user.id, data["day3_date"], session)

        if day3_total > 0:
            # –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ day3, –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –§–ß–ò
            day1_value = data["day1_value"]
            fci_value = calculate_fci(day1_value, day2_value, day3_total)

            async with async_session() as session:
                fci_repo = FCIRepository(session)
                await fci_repo.update_or_create(user_id=user.id, date=data["day1_date"], value=fci_value)

            result_text = f"""
üéâ <b>–†–∞—Å—á—ë—Ç –§–ß–ò –∑–∞–≤–µ—Ä—à—ë–Ω!</b>

üìä <b>–î–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ {format_date(data["day1_date"])}: {day1_value} –µ–¥.
‚Ä¢ {format_date(data["day2_date"])}: {day2_value} –µ–¥.  
‚Ä¢ {format_date(data["day3_date"])}: {day3_total:.1f} –µ–¥.

üìà <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {(day1_value + day2_value + day3_total) / 3:.2f} –µ–¥.
‚Ä¢ <b>–§–ß–ò = {fci_value:.2f}</b>

‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –§–ß–ò –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –£–ö.
            """

            await state.clear()
            await message.answer(result_text, parse_mode="HTML", reply_markup=get_fci_edit_keyboard())
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())
            return

        text = f"""
‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {format_date(data["day2_date"])}: {day2_value} –µ–¥. (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î)

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ {format_date(data["day3_date"])}:
        """

        await state.set_state(FCIStates.waiting_for_day3)
        await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.5):",
            reply_markup=get_cancel_keyboard(),
        )


@router.message(FCIStates.waiting_for_day3)
async def process_day3_input(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å 3 –∏ —Ä–∞—Å—á—ë—Ç –§–ß–ò"""
    try:
        day3_value = parse_number_input(message.text or "")
        if day3_value <= 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_cancel_keyboard()
            )
            return

        data = await state.get_data()
        day1_value = data["day1_value"]
        day2_value = data["day2_value"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –¥–Ω—è –≤ –ë–î
        async with async_session() as session:
            insulin_repo = InsulinRecordRepository(session)
            fci_repo = FCIRepository(session)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—É–ª–∏–Ω –∑–∞ —Ç—Ä–µ—Ç–∏–π –¥–µ–Ω—å –∫–∞–∫ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
            await insulin_repo.create(
                user_id=user.id,
                date=data["day3_date"],
                insulin_type=InsulinType.FOOD,
                amount=day3_value,
                is_manual=True,  # –ü–µ—Ä–≤—ã–π –≤–≤–æ–¥ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º
            )

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –§–ß–ò
            fci_value = calculate_fci(day1_value, day2_value, day3_value)
            await fci_repo.update_or_create(user_id=user.id, date=data["day3_date"], value=fci_value)

        result_text = f"""
üéâ <b>–†–∞—Å—á—ë—Ç –§–ß–ò –∑–∞–≤–µ—Ä—à—ë–Ω!</b>

üìä <b>–î–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ {format_date(data["day1_date"])}: {day1_value} –µ–¥.
‚Ä¢ {format_date(data["day2_date"])}: {day2_value} –µ–¥.  
‚Ä¢ {format_date(data["day3_date"])}: {day3_value} –µ–¥.

üìà <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {(day1_value + day2_value + day3_value) / 3:.2f} –µ–¥.
‚Ä¢ <b>–§–ß–ò = {fci_value:.2f}</b>

‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –§–ß–ò –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –£–ö.
        """

        await state.clear()
        await message.answer(result_text, parse_mode="HTML", reply_markup=get_fci_edit_keyboard())
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.5):",
            reply_markup=get_cancel_keyboard(),
        )


@router.callback_query(F.data == "fci_correct_day")
async def start_correction(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å"""
    await state.set_state(FCIStates.waiting_for_correction_date)

    text = """
‚úèÔ∏è <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å</b>

–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.10.2024):
    """

    if callback.message and hasattr(callback.message, "edit_text"):
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_cancel_keyboard())
    elif callback.bot:
        await callback.bot.send_message(
            chat_id=callback.from_user.id, text=text, parse_mode="HTML", reply_markup=get_cancel_keyboard()
        )
    await callback.answer()


@router.message(FCIStates.waiting_for_correction_date)
async def process_correction_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        from datetime import datetime

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_str = (message.text or "").strip()
        date_obj = datetime.strptime(date_str, "%d.%m.%Y").date()

        await state.update_data(correction_date=date_obj)
        await state.set_state(FCIStates.waiting_for_correction_amount)

        text = f"""
‚úÖ –î–∞—Ç–∞: {format_date(date_obj)}

–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å:
        """

        await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.10.2024):",
            reply_markup=get_cancel_keyboard(),
        )


@router.message(FCIStates.waiting_for_correction_amount)
async def process_correction_amount(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Å—É–ª–∏–Ω–∞"""
    try:
        amount = parse_number_input(message.text or "")
        if amount < 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard(),
            )
            return

        data = await state.get_data()
        correction_date = data["correction_date"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ insulin_records (–∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä—É—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏)
        async with async_session() as session:
            insulin_repo = InsulinRecordRepository(session)
            await insulin_repo.update_or_create_manual(
                user_id=user.id,
                target_date=correction_date,
                insulin_type=InsulinType.FOOD,
                amount=amount,
            )

        text = f"""
‚úÖ <b>–î–∞–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!</b>

üìÖ –î–∞—Ç–∞: {format_date(correction_date)}
üíâ –ò–Ω—Å—É–ª–∏–Ω: {amount} –µ–¥.

–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—á—ë—Ç –§–ß–ò —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        """

        await state.clear()
        await message.answer(text, parse_mode="HTML", reply_markup=get_main_menu_keyboard())

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.5):",
            reply_markup=get_cancel_keyboard(),
        )


@router.callback_query(F.data == "fci_continue")
async def continue_fci_calculation(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–∞ –§–ß–ò –±–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    data = await state.get_data()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
    if "day1_value" in data and "day2_value" not in data:
        # –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ day2
        text = f"""
‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞—Å—á—ë—Ç –§–ß–ò

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ {format_date(data["day2_date"])}:
        """
        await state.set_state(FCIStates.waiting_for_day2)
        if callback.message and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")
        elif callback.bot:
            await callback.bot.send_message(
                chat_id=callback.from_user.id, text=text, parse_mode="HTML", reply_markup=get_cancel_keyboard()
            )

    elif "day1_value" in data and "day2_value" in data:
        # –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ day3
        text = f"""
‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞—Å—á—ë—Ç –§–ß–ò

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ {format_date(data["day3_date"])}:
        """
        await state.set_state(FCIStates.waiting_for_day3)
        if callback.message and hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")
        elif callback.bot:
            await callback.bot.send_message(
                chat_id=callback.from_user.id, text=text, parse_mode="HTML", reply_markup=get_cancel_keyboard()
            )

    await callback.answer()


@router.callback_query(F.data == "fci_edit_value")
async def start_fci_edit(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—É–ª–∏–Ω–∞ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –§–ß–ò"""
    await state.set_state(FCIStates.waiting_for_edit_date)

    text = """
‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –§–ß–ò</b>

–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 03.10.2024):
    """

    if callback.message and hasattr(callback.message, "edit_text"):
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_cancel_keyboard())
    elif callback.bot:
        await callback.bot.send_message(
            chat_id=callback.from_user.id, text=text, parse_mode="HTML", reply_markup=get_cancel_keyboard()
        )
    await callback.answer()


@router.message(FCIStates.waiting_for_edit_date)
async def process_fci_edit_date(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—É–ª–∏–Ω–∞"""
    try:
        from datetime import datetime

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_str = (message.text or "").strip()
        date_obj = datetime.strptime(date_str, "%d.%m.%Y").date()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ —ç—Ç—É –¥–∞—Ç—É
        async with async_session() as session:
            current_insulin = await get_insulin_for_fci(user.id, date_obj, session)

        await state.update_data(edit_date=date_obj, current_insulin=current_insulin)
        await state.set_state(FCIStates.waiting_for_edit_value)

        text = f"""
‚úÖ –î–∞—Ç–∞: {format_date(date_obj)}
üíâ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞: <b>{current_insulin:.1f} –µ–¥.</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å:
        """

        await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 03.10.2024):",
            reply_markup=get_cancel_keyboard(),
        )


@router.message(FCIStates.waiting_for_edit_value)
async def process_fci_edit_value(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Å—É–ª–∏–Ω–∞ –∏ –ø–µ—Ä–µ—Å—á–µ—Ç –§–ß–ò"""
    try:
        new_insulin = parse_number_input(message.text or "")
        if new_insulin < 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard(),
            )
            return

        data = await state.get_data()
        edit_date = data["edit_date"]
        current_insulin = data["current_insulin"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—É–ª–∏–Ω–∞ –∫–∞–∫ —Ä—É—á–Ω—É—é –∑–∞–ø–∏—Å—å
        async with async_session() as session:
            insulin_repo = InsulinRecordRepository(session)
            await insulin_repo.update_or_create_manual(
                user_id=user.id, target_date=edit_date, insulin_type=InsulinType.FOOD, amount=new_insulin
            )

        text = f"""
‚úÖ <b>–î–∞–Ω–Ω—ã–µ –∏–Ω—Å—É–ª–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω—ã!</b>

üìÖ –î–∞—Ç–∞: {format_date(edit_date)}
üíâ –°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_insulin:.1f} –µ–¥.
üíâ –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{new_insulin:.1f} –µ–¥.</b>

–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–π—Ç–µ –§–ß–ò, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ.
        """

        await state.clear()
        await message.answer(text, parse_mode="HTML", reply_markup=get_main_menu_keyboard())

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.0):",
            reply_markup=get_cancel_keyboard(),
        )
