from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from app.states import FCIStates
from app.keyboards import get_main_menu_keyboard, get_cancel_keyboard
from app.utils import get_date_suggestions, format_date, calculate_fci, parse_number_input
from db.repository import FCIRepository, InsulinRecordRepository
from db.models import InsulinType
from db.session import async_session

router = Router()


@router.message(F.text == "üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –§–ß–ò")
async def start_fci_calculation(message: Message, state: FSMContext, user):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—á—ë—Ç–∞ –§–ß–ò"""
    day1, day2, day3 = get_date_suggestions()

    async with async_session() as session:
        insulin_repo = InsulinRecordRepository(session)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏ –∏–∑ –ë–î
        day1_total = await insulin_repo.get_total_by_date(user.id, day1)
        day2_total = await insulin_repo.get_total_by_date(user.id, day2)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–±–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–Ω—è, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç—Ä–µ—Ç—å–µ–º—É –¥–Ω—é
        if day1_total > 0 and day2_total > 0:
            text = f"""
üìä <b>–†–∞—Å—á—ë—Ç –§–ß–ò (—Ñ–æ—Ä–º—É–ª–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Å—É–ª–∏–Ω—É)</b>

–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏:
‚Ä¢ <b>{format_date(day1)}</b>: {day1_total:.1f} –µ–¥.
‚Ä¢ <b>{format_date(day2)}</b>: {day2_total:.1f} –µ–¥.

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ <b>{format_date(day3)}</b>:
            """

            await state.set_state(FCIStates.waiting_for_day3)
            await state.update_data(
                day1_date=day1, day2_date=day2, day3_date=day3, day1_value=day1_total, day2_value=day2_total
            )
            await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")
            return

        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–≥–æ
        elif day1_total == 0:
            text = f"""
üìä <b>–†–∞—Å—á—ë—Ç –§–ß–ò (—Ñ–æ—Ä–º—É–ª–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Å—É–ª–∏–Ω—É)</b>

–ú–Ω–µ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –Ω–∞ –µ–¥—É –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ (—Å–∫–æ–ª—ã) —Å 8:00 –¥–æ 24:00 –∑–∞ —Ç—Ä–∏ –¥–Ω—è:

‚Ä¢ <b>–í—á–µ—Ä–∞</b> ({format_date(day1)})
‚Ä¢ <b>–ü–æ–∑–∞–≤—á–µ—Ä–∞</b> ({format_date(day2)})
‚Ä¢ <b>–ü–æ–∑–∞–ø–æ–∑–∞–≤—á–µ—Ä–∞</b> ({format_date(day3)})

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –í —Ä–∞—Å—á—ë—Ç –ù–ï –≤–∫–ª—é—á–∞–µ—Ç—Å—è –±–∞–∑–∞–ª—å–Ω—ã–π (—Ñ–æ–Ω–æ–≤–æ–π) –∏–Ω—Å—É–ª–∏–Ω!

–ù–∞—á–Ω—ë–º —Å –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è. –í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ {format_date(day1)}:
            """

            await state.set_state(FCIStates.waiting_for_day1)
            await state.update_data(day1_date=day1, day2_date=day2, day3_date=day3)
            await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Ç–æ—Ä–æ–≥–æ
        else:
            text = f"""
üìä <b>–†–∞—Å—á—ë—Ç –§–ß–ò (—Ñ–æ—Ä–º—É–ª–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Å—É–ª–∏–Ω—É)</b>

–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:
‚Ä¢ <b>{format_date(day1)}</b>: {day1_total:.1f} –µ–¥. ‚úÖ

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ <b>{format_date(day2)}</b>:
            """

            await state.set_state(FCIStates.waiting_for_day2)
            await state.update_data(day1_date=day1, day2_date=day2, day3_date=day3, day1_value=day1_total)
            await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")


@router.message(FCIStates.waiting_for_day1)
async def process_day1_input(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å 1"""
    try:
        day1_value = parse_number_input(message.text or "")
        if day1_value <= 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_cancel_keyboard()
            )
            return

        data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—É–ª–∏–Ω–∞ –≤ –ë–î
        async with async_session() as session:
            insulin_repo = InsulinRecordRepository(session)
            await insulin_repo.create(
                user_id=user.id,
                date=data["day1_date"],
                insulin_type=InsulinType.FOOD,  # –ü–æ–∫–∞ —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ "–Ω–∞ –µ–¥—É", –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —Ç–∏–ø—ã –ø–æ–∑–∂–µ
                amount=day1_value,
            )

        await state.update_data(day1_value=day1_value)

        text = f"""
‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {format_date(data["day1_date"])}: {day1_value} –µ–¥. (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î)

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ {format_date(data["day2_date"])}:
        """

        await state.set_state(FCIStates.waiting_for_day2)
        await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.5):",
            reply_markup=get_cancel_keyboard(),
        )


@router.message(FCIStates.waiting_for_day2)
async def process_day2_input(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å 2"""
    try:
        day2_value = parse_number_input(message.text or "")
        if day2_value <= 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_cancel_keyboard()
            )
            return

        data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—É–ª–∏–Ω–∞ –≤ –ë–î
        async with async_session() as session:
            insulin_repo = InsulinRecordRepository(session)
            await insulin_repo.create(
                user_id=user.id,
                date=data["day2_date"],
                insulin_type=InsulinType.FOOD,  # –ü–æ–∫–∞ —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ "–Ω–∞ –µ–¥—É", –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —Ç–∏–ø—ã –ø–æ–∑–∂–µ
                amount=day2_value,
            )

        await state.update_data(day2_value=day2_value)

        text = f"""
‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {format_date(data["day2_date"])}: {day2_value} –µ–¥. (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î)

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –∑–∞ {format_date(data["day3_date"])}:
        """

        await state.set_state(FCIStates.waiting_for_day3)
        await message.answer(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.5):",
            reply_markup=get_cancel_keyboard(),
        )


@router.message(FCIStates.waiting_for_day3)
async def process_day3_input(message: Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å 3 –∏ —Ä–∞—Å—á—ë—Ç –§–ß–ò"""
    try:
        day3_value = parse_number_input(message.text or "")
        if day3_value <= 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_cancel_keyboard()
            )
            return

        data = await state.get_data()
        day1_value = data["day1_value"]
        day2_value = data["day2_value"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –¥–Ω—è –≤ –ë–î
        async with async_session() as session:
            insulin_repo = InsulinRecordRepository(session)
            fci_repo = FCIRepository(session)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—É–ª–∏–Ω –∑–∞ —Ç—Ä–µ—Ç–∏–π –¥–µ–Ω—å
            await insulin_repo.create(
                user_id=user.id,
                date=data["day3_date"],
                insulin_type=InsulinType.FOOD,  # –ü–æ–∫–∞ —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ "–Ω–∞ –µ–¥—É", –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —Ç–∏–ø—ã –ø–æ–∑–∂–µ
                amount=day3_value,
            )

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –§–ß–ò
            fci_value = calculate_fci(day1_value, day2_value, day3_value)
            await fci_repo.create(user_id=user.id, date=data["day3_date"], value=fci_value)

        result_text = f"""
üéâ <b>–†–∞—Å—á—ë—Ç –§–ß–ò –∑–∞–≤–µ—Ä—à—ë–Ω!</b>

üìä <b>–î–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ {format_date(data["day1_date"])}: {day1_value} –µ–¥.
‚Ä¢ {format_date(data["day2_date"])}: {day2_value} –µ–¥.  
‚Ä¢ {format_date(data["day3_date"])}: {day3_value} –µ–¥.

üìà <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {(day1_value + day2_value + day3_value) / 3:.2f} –µ–¥.
‚Ä¢ <b>–§–ß–ò = {fci_value:.2f}</b>

‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –§–ß–ò –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –£–ö.
        """

        await state.clear()
        await message.answer(result_text, parse_mode="HTML", reply_markup=get_main_menu_keyboard())

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—É–ª–∏–Ω–∞ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.5):",
            reply_markup=get_cancel_keyboard(),
        )
