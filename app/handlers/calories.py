from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.states import CaloriesStates
from app.keyboards import (
    get_calories_gender_keyboard,
    get_calories_activity_keyboard,
)


router = Router()


async def _edit_or_send_callback_text(callback: CallbackQuery, text: str):
    msg = callback.message
    if msg is not None and hasattr(msg, "edit_text"):
        try:
            await msg.edit_text(text)
            return
        except Exception:
            pass
    if msg is not None and hasattr(msg, "answer"):
        try:
            await msg.answer(text)
            return
        except Exception:
            pass
    bot = callback.bot
    if bot is not None:
        await bot.send_message(chat_id=callback.from_user.id, text=text)


def _get_activity_coefficient_from_callback(data: str) -> float:
    if data == "cal_act_male_sedentary":
        return 1.0
    if data == "cal_act_male_low":
        return 1.13
    if data == "cal_act_male_medium":
        return 1.26
    if data == "cal_act_male_high":
        return 1.42
    if data == "cal_act_female_sedentary":
        return 1.0
    if data == "cal_act_female_low":
        return 1.16
    if data == "cal_act_female_medium":
        return 1.31
    if data == "cal_act_female_high":
        return 1.56
    raise ValueError("Unknown activity callback data")


def _calc_metabolic_expenses(age_years: int, age_months: int | None) -> int:
    # 0-3 –º–µ—Å = 175; 4-6 –º–µ—Å = 56; 7-12 –º–µ—Å = 22; 1-8 –ª–µ—Ç = 20; 9-18 –ª–µ—Ç = 25
    if age_years == 0:
        months = age_months or 0
        if months <= 3:
            return 175
        if months <= 6:
            return 56
        return 22
    if 1 <= age_years <= 8:
        return 20
    return 25


def _calc_eer(
    gender: str,
    age_years: int,
    weight_kg: float,
    height_cm: float,
    activity_coef: float,
    mr: int,
) -> float:
    height_m = height_cm / 100.0
    if age_years < 3:
        # –î–ª—è –º–∞–ª—å—á–∏–∫–æ–≤ –∏ –¥–µ–≤–æ—á–µ–∫ 0-3 –≥–æ–¥–∞: –û–≠–ü = 89 * –≤–µ—Å - 100 + –ú–†
        return 89.0 * weight_kg - 100.0 + mr
    # 3-18: –ø–æ–ª–æ–∑–∞–≤–∏—Å–∏–º—ã–µ —Ñ–æ—Ä–º—É–ª—ã
    if gender == "male":
        # –û–≠–ü = 88.5 - 61.9 * –≤–æ–∑—Ä–∞—Å—Ç + –ö–ê * (26.7 * –≤–µ—Å + 903 * —Ä–æ—Å—Ç(–º)) + –ú–†
        return 88.5 - 61.9 * age_years + activity_coef * (26.7 * weight_kg + 903.0 * height_m) + mr
    # female
    return 135.3 - 30.8 * age_years + activity_coef * (10.0 * weight_kg + 934.0 * height_m) + mr


@router.message(F.text == "üî• –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π")
async def calories_entry(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(CaloriesStates.waiting_for_gender)
    await message.answer(
        "<b>–†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:",
        reply_markup=get_calories_gender_keyboard(),
        parse_mode="HTML",
    )


@router.callback_query(CaloriesStates.waiting_for_gender, F.data.in_({"cal_gender_male", "cal_gender_female"}))
async def calories_gender_selected(callback: CallbackQuery, state: FSMContext):
    gender = "male" if callback.data == "cal_gender_male" else "female"
    await state.update_data(gender=gender)
    await state.set_state(CaloriesStates.waiting_for_age_years)
    await _edit_or_send_callback_text(callback, "–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤ –ø–æ–ª–Ω—ã—Ö –≥–æ–¥–∞—Ö (0-18):")
    await callback.answer()


@router.message(CaloriesStates.waiting_for_age_years)
async def calories_age_years(message: Message, state: FSMContext):
    text = message.text
    if text is None:
        await message.answer("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ª–µ—Ç –æ—Ç 0 –¥–æ 18.")
        return
    try:
        age_years = int(text.strip())
    except Exception:
        await message.answer("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ª–µ—Ç –æ—Ç 0 –¥–æ 18.")
        return
    if age_years < 0 or age_years > 18:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-18 –ª–µ—Ç.")
        return

    await state.update_data(age_years=age_years)

    if age_years == 0:
        # –ù—É–∂–Ω—ã –º–µ—Å—è—Ü—ã –¥–ª—è –ú–†
        await state.set_state(CaloriesStates.waiting_for_metabolic_range)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤ –º–µ—Å—è—Ü–∞—Ö (0-12):")
        return

    await state.set_state(CaloriesStates.waiting_for_weight_kg)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 24.5):")


@router.message(CaloriesStates.waiting_for_metabolic_range)
async def calories_age_months(message: Message, state: FSMContext):
    text = message.text
    if text is None:
        await message.answer("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–µ–≤ –æ—Ç 0 –¥–æ 12.")
        return
    try:
        age_months = int(text.strip())
    except Exception:
        await message.answer("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–µ–≤ –æ—Ç 0 –¥–æ 12.")
        return
    if age_months < 0 or age_months > 12:
        await message.answer("–ú–µ—Å—è—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-12.")
        return

    await state.update_data(age_months=age_months)
    await state.set_state(CaloriesStates.waiting_for_weight_kg)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7.8):")


@router.message(CaloriesStates.waiting_for_weight_kg)
async def calories_weight(message: Message, state: FSMContext):
    text = message.text
    if text is None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 24.5")
        return
    try:
        weight = float(text.replace(",", ".").strip())
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 24.5")
        return
    if weight <= 0 or weight > 400:
        await message.answer("–í–µ—Å –≤–Ω–µ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤ (0-400 –∫–≥). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(weight_kg=weight)
    await state.set_state(CaloriesStates.waiting_for_height_cm)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 128):")


@router.message(CaloriesStates.waiting_for_height_cm)
async def calories_height(message: Message, state: FSMContext):
    text = message.text
    if text is None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 128")
        return
    try:
        height_cm = float(text.replace(",", ".").strip())
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 128")
        return
    if height_cm <= 30 or height_cm > 220:
        await message.answer("–†–æ—Å—Ç –≤–Ω–µ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤ (30-220 —Å–º). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(height_cm=height_cm)

    data = await state.get_data()
    gender = data.get("gender", "male")
    await state.set_state(CaloriesStates.waiting_for_activity)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        reply_markup=get_calories_activity_keyboard(gender),
    )


@router.callback_query(CaloriesStates.waiting_for_activity)
async def calories_activity(callback: CallbackQuery, state: FSMContext):
    if not callback.data:
        await callback.answer()
        return
    try:
        activity_coef = _get_activity_coefficient_from_callback(callback.data)
    except Exception:
        await callback.answer()
        return

    await state.update_data(activity_coef=activity_coef)

    data = await state.get_data()
    gender = data["gender"]
    age_years = int(data["age_years"])
    age_months = int(data.get("age_months") or 0)
    weight_kg = float(data["weight_kg"])
    height_cm = float(data["height_cm"])

    mr = _calc_metabolic_expenses(age_years=age_years, age_months=age_months)
    eer = _calc_eer(
        gender=gender,
        age_years=age_years,
        weight_kg=weight_kg,
        height_cm=height_cm,
        activity_coef=activity_coef,
        mr=mr,
    )

    eer_rounded = int(round(eer))

    # –ò—Ç–æ–≥
    lines = [
        "<b>–†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π</b>",
        f"–ü–æ–ª: {'–ú–∞–ª—å—á–∏–∫' if gender == 'male' else '–î–µ–≤–æ—á–∫–∞'}",
        f"–í–æ–∑—Ä–∞—Å—Ç: {age_years} –ª–µ—Ç" + (f" {age_months} –º–µ—Å" if age_years == 0 else ""),
        f"–í–µ—Å: {weight_kg:.1f} –∫–≥",
        f"–†–æ—Å—Ç: {height_cm:.0f} —Å–º",
        f"–ö–ê: {activity_coef}",
        f"–ú–†: {mr}",
        "",
        f"–û—Ü–µ–Ω–æ—á–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å: <b>{eer_rounded} –∫–∫–∞–ª/–¥–µ–Ω—å</b>",
        "",
        "–î–∞–ª—å—à–µ: —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –ë–ñ–£, –ø–æ–¥–±–∏—Ä–∞–π—Ç–µ —Ä–∞—Ü–∏–æ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –°–ö.",
    ]

    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = "\n".join(lines)
    msg = callback.message
    if msg is not None and hasattr(msg, "edit_text"):
        try:
            await msg.edit_text(text, parse_mode="HTML")
            await state.clear()
            await callback.answer()
            return
        except Exception:
            pass
    if msg is not None and hasattr(msg, "answer"):
        try:
            await msg.answer(text, parse_mode="HTML")
            await state.clear()
            await callback.answer()
            return
        except Exception:
            pass
    bot = callback.bot
    if bot is not None:
        await bot.send_message(chat_id=callback.from_user.id, text=text, parse_mode="HTML")
    await state.clear()
    await callback.answer()
