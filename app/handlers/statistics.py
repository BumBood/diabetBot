from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import date, timedelta
from app.keyboards import get_statistics_keyboard, get_main_menu_keyboard
from app.utils import format_date, get_meal_type_name
from db.repository import FCIRepository, MealRecordRepository
from db.session import async_session
from db.models import MealType

router = Router()


@router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    text = """
üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
    """

    await message.answer(text, reply_markup=get_statistics_keyboard(), parse_mode="HTML")


@router.callback_query(F.data == "stats_today")
async def show_today_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = date.today()
    await show_stats_for_date(callback, today)


@router.callback_query(F.data == "stats_yesterday")
async def show_yesterday_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—á–µ—Ä–∞"""
    yesterday = date.today() - timedelta(days=1)
    await show_stats_for_date(callback, yesterday)


@router.callback_query(F.data == "stats_week")
async def show_week_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é"""
    end_date = date.today()
    start_date = end_date - timedelta(days=6)
    await show_stats_for_period(callback, start_date, end_date)


@router.callback_query(F.data == "stats_month")
async def show_month_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü"""
    end_date = date.today()
    start_date = end_date - timedelta(days=29)
    await show_stats_for_period(callback, start_date, end_date)


async def show_stats_for_date(callback: CallbackQuery, target_date: date):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    async with async_session() as session:
        fci_repo = FCIRepository(session)
        meal_repo = MealRecordRepository(session)

        # –ü–æ–ª—É—á–∞–µ–º –§–ß–ò –∑–∞ —ç—Ç—É –¥–∞—Ç—É
        fci_record = await fci_repo.get_by_date(target_date)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏—ë–º–∞—Ö –ø–∏—â–∏ –∑–∞ —ç—Ç—É –¥–∞—Ç—É
        meal_records = await meal_repo.get_by_date(target_date)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏
        meals_by_type = {}
        for record in meal_records:
            meals_by_type[record.meal_type] = record

        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {format_date(target_date)}</b>\n\n"

        if fci_record:
            text += f"üìà <b>–§–ß–ò:</b> {fci_record.value:.2f}\n\n"
        else:
            text += "üìà <b>–§–ß–ò:</b> –ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω\n\n"

        text += "üçΩÔ∏è <b>–£–ö –ø–æ –ø—Ä–∏—ë–º–∞–º –ø–∏—â–∏:</b>\n"

        for meal_type in [MealType.BREAKFAST, MealType.LUNCH, MealType.SNACK, MealType.DINNER]:
            meal_name = get_meal_type_name(meal_type)
            if meal_type in meals_by_type:
                record = meals_by_type[meal_type]
                text += f"‚Ä¢ {meal_name}: {record.uk_value:.3f}\n"
            else:
                text += f"‚Ä¢ {meal_name}: –ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω\n"

        if not meal_records:
            text += "\n‚ùå –ó–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏—ë–º–∞—Ö –ø–∏—â–∏"

        await callback.message.edit_text(text, parse_mode="HTML")
        await callback.answer()


async def show_stats_for_period(callback: CallbackQuery, start_date: date, end_date: date):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    async with async_session() as session:
        fci_repo = FCIRepository(session)
        meal_repo = MealRecordRepository(session)

        # –ü–æ–ª—É—á–∞–µ–º –§–ß–ò –∑–∞ –ø–µ—Ä–∏–æ–¥
        fci_records = await fci_repo.get_by_date_range(start_date, end_date)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏—ë–º–∞—Ö –ø–∏—â–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        meal_records = await meal_repo.get_by_date_range(start_date, end_date)

        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {format_date(start_date)} - {format_date(end_date)}</b>\n\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –§–ß–ò
        if fci_records:
            fci_values = [record.value for record in fci_records]
            avg_fci = sum(fci_values) / len(fci_values)
            text += f"üìà <b>–§–ß–ò:</b>\n"
            text += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(fci_records)}\n"
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {avg_fci:.2f}\n"
            text += f"‚Ä¢ –ú–∏–Ω–∏–º—É–º: {min(fci_values):.2f}\n"
            text += f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {max(fci_values):.2f}\n\n"
        else:
            text += "üìà <b>–§–ß–ò:</b> –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –£–ö –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏
        text += "üçΩÔ∏è <b>–£–ö –ø–æ –ø—Ä–∏—ë–º–∞–º –ø–∏—â–∏:</b>\n"

        for meal_type in [MealType.BREAKFAST, MealType.LUNCH, MealType.SNACK, MealType.DINNER]:
            meal_name = get_meal_type_name(meal_type)
            type_records = [r for r in meal_records if r.meal_type == meal_type]

            if type_records:
                uk_values = [record.uk_value for record in type_records]
                avg_uk = sum(uk_values) / len(uk_values)
                text += f"‚Ä¢ {meal_name}: {len(type_records)} –∑–∞–ø–∏—Å–µ–π, —Å—Ä–µ–¥–Ω–µ–µ –£–ö: {avg_uk:.3f}\n"
            else:
                text += f"‚Ä¢ {meal_name}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        if not meal_records:
            text += "\n‚ùå –ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏—ë–º–∞—Ö –ø–∏—â–∏"

        await callback.message.edit_text(text, parse_mode="HTML")
        await callback.answer()


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ DiabetBot</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>

üìä <b>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –§–ß–ò</b>
‚Ä¢ –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± —É–ª—å—Ç—Ä–∞–∫–æ—Ä–æ—Ç–∫–æ–º –∏–Ω—Å—É–ª–∏–Ω–µ –∑–∞ 3 –¥–Ω—è
‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É–ª—É —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Å—É–ª–∏–Ω—É
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞—Å—á—ë—Ç–∞—Ö –£–ö

üçΩÔ∏è <b>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –£–ö</b>
‚Ä¢ –ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏—ë–º–µ –ø–∏—â–∏
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–æ–ª–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π
‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Å–ª–æ–≤–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –§–ß–ò –∏ –£–ö
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ç—Ä–µ–Ω–¥—ã

<b>–§–æ—Ä–º—É–ª—ã:</b>

‚Ä¢ <b>–§–ß–ò</b> = 100 / –°—Ä–µ–¥–Ω–µ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ_–∏–Ω—Å—É–ª–∏–Ω–∞_–∑–∞_3_–¥–Ω—è
‚Ä¢ <b>–£–ö</b> = ((–°–ö_–æ—Ç—Ä–∞–±–æ—Ç–∫–∞ - –°–ö_—Å—Ç–∞—Ä—Ç) / –§–ß–ò + –ò–Ω—Å—É–ª–∏–Ω_–µ–¥–∞ + –ò–Ω—Å—É–ª–∏–Ω_–ø–æ–¥–∫–æ–ª–∫–∏) / –£–≥–ª–µ–≤–æ–¥—ã

<b>–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ–¥–∫–æ–ª–æ–∫:</b>
‚Ä¢ 1 —á–∞—Å –ø–æ—Å–ª–µ –µ–¥—ã ‚Üí √ó 0.85
‚Ä¢ 2 —á–∞—Å–∞ –ø–æ—Å–ª–µ –µ–¥—ã ‚Üí √ó 0.6  
‚Ä¢ 3 —á–∞—Å–∞ –ø–æ—Å–ª–µ –µ–¥—ã ‚Üí √ó 0.25

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
    """

    await message.answer(help_text, parse_mode="HTML")
